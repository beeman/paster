package com.google.code.paster;

import com.google.code.paster.util.KbdataConnector;
import com.google.code.paster.entity.KbItem;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Bram Borggreve
 */
public class Main extends javax.swing.JFrame {

    public static Connection kbConnection = null;
    public static KbdataConnector kc = new KbdataConnector();
    public static DefaultListModel model;

    /** 
     * Creates new form NewJFrame, updates Model, Clears Editor
     */
    public Main() {
        try {
//            Here are some optional Look and Feel definitions
//            String lnfName = "javax.swing.plaf.metal.MetalLookAndFeel";
//            String lnfName = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";
//            String lnfName = "com.sun.java.swing.plaf.gtk.GTKLookAndFeel";
//            String lnfName = "com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel";
            String lnfName = UIManager.getSystemLookAndFeelClassName();
            UIManager.setLookAndFeel(lnfName);
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        updateModel();
        clearEditor();
    }
    
    /**
     * Read the latest items from the Model
     */
    public void updateModel() {
        model = kc.getModel();
        kbList.setModel(model);
    }

    /**
     * Deletes selected item after asking for confirmation
     */
    public void deleteSelectedItem() {
        String content = "Are you sure you want to delete this item?";
        String title = "Deleting item";

        switch (JOptionPane.showConfirmDialog(JOptionPane.getRootFrame(), content, title, 2)) {
            case 0:
                int element = kbList.getSelectedIndex();
                KbItem delItem = (KbItem) model.getElementAt(element);

                kc.deleteItem(delItem);
                updateModel();
                clearEditor();

                if (element > kbList.getLastVisibleIndex()) {
                    element = kbList.getLastVisibleIndex();
                }
                kbList.setSelectedIndex(element);
                showHightlightedItem(false);
                break;
        }
    }

    /**
     * Display the text from highlighted item
     * @param doCopy Copy text to cliboard?
     */
    private void showHightlightedItem(boolean doCopy) {
        clearEditor();
        int id = kbList.getSelectedIndex();
        KbItem thisItem = (KbItem) model.getElementAt(id);

        infoLabel.setText("Double click or press enter to copy text");
        if (doCopy) {
            copyToClipboard(thisItem.getText());
        }

        textPanel.setText(thisItem.getText());
        textPanel.setCaretPosition(0);
        titleField.setText(thisItem.getTitle());

        deleteButton.setEnabled(true);
        editButton.setEnabled(true);

    }

    /**
     * Copies the given text in the clipboard
     * @param text Text to copy
     */
    private void copyToClipboard(String text) {
        StringSelection stringData = new StringSelection(text);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringData, stringData);
        infoLabel.setText("Text copied to clipboard :)");
    }
    
    /**
     * Unlock the fields to enable content editting
     */
    public void openEditor() {
        textPanel.setEditable(true);
        titleField.setEnabled(true);
        submitButton.setEnabled(true);
    }

    /**
     * Clear the content of the editor
     */
    private void clearEditor() {
        openEditor();
        textPanel.setText("");
        titleField.setText("");
        submitButton.setText(" ");
        textPanel.setEditable(false);
        titleField.setEnabled(false);
        submitButton.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new javax.swing.JScrollPane();
        kbList = new javax.swing.JList();
        scrollPane2 = new javax.swing.JScrollPane();
        textPanel = new javax.swing.JTextPane();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        titleField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paster");

        kbList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        kbList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                kbListMouseReleased(evt);
            }
        });
        kbList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                kbListKeyReleased(evt);
            }
        });
        scrollPane1.setViewportView(kbList);

        textPanel.setBackground(new java.awt.Color(255, 255, 255));
        scrollPane2.setViewportView(textPanel);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        titleField.setEnabled(false);

        submitButton.setText(" ");
        submitButton.setEnabled(false);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(infoLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton))
                    .addComponent(scrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleField, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String title = titleField.getText();
        String text = textPanel.getText();
        String action = submitButton.getText();
        KbItem thisItem = null;
        int id = 0;

        if (action.equals("Save")) {
            System.out.println("Adding new item!");
            kc.insertItem(title, text);
        } else {
            id = kbList.getSelectedIndex();
            thisItem = (KbItem) model.getElementAt(id);
            int editId = thisItem.getId();
            System.out.println("Updating item " + editId);
            kc.updateItem(editId, title, text);
        }

        updateModel();
        clearEditor();

        if (thisItem == null) {
            kbList.setSelectedIndex(kbList.getLastVisibleIndex());
        } else {
            kbList.setSelectedIndex(id);
        }

        showHightlightedItem(false);
    }//GEN-LAST:event_submitButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteSelectedItem();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        clearEditor();
        openEditor();
        submitButton.setText("Save");
        titleField.requestFocus();
        kbList.clearSelection();
        deleteButton.setEnabled(false);
        editButton.setEnabled(false);
        infoLabel.setText("Add title and content and click Save");
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        openEditor();
        submitButton.setText("Update");
        titleField.requestFocus();
        infoLabel.setText("Update title or content and click Update");
    }//GEN-LAST:event_editButtonActionPerformed

    private void kbListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kbListKeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                showHightlightedItem(true);
                break;
            case KeyEvent.VK_UP:
            case KeyEvent.VK_DOWN:
            case KeyEvent.VK_PAGE_UP:
            case KeyEvent.VK_PAGE_DOWN:
                showHightlightedItem(false);
                break;
            case KeyEvent.VK_DELETE:
                deleteSelectedItem();
                break;
        }

    }//GEN-LAST:event_kbListKeyReleased

    private void kbListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kbListMouseReleased
        if (evt.getClickCount() == 2) {
            showHightlightedItem(true);
        } else {
            showHightlightedItem(false);
        }

    }//GEN-LAST:event_kbListMouseReleased
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    public javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel infoLabel;
    public static javax.swing.JList kbList;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane2;
    public javax.swing.JButton submitButton;
    private javax.swing.JTextPane textPanel;
    private javax.swing.JTextField titleField;
    // End of variables declaration//GEN-END:variables
}
